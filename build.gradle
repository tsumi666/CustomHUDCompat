plugins {
	id 'fabric-loom' version '1.4-SNAPSHOT'
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
	maven {
		url = "https://api.modrinth.com/maven"
	}
	maven {
		url = "https://cursemaven.com"
	}
}

loom {
	splitEnvironmentSourceSets()

	mods {
		"modid" {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}

}

configurations {
	// Shared between Litematica and Tweakeroo
	sharedMalilib.extendsFrom modImplementation

	// Individual mod configurations
	tweakerooCompat.extendsFrom sharedMalilib
	// litematicaCompat.extendsFrom sharedMalilib
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"

	// Dependencies common to all
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	modImplementation "maven.modrinth:customhud:${project.customhud_version}"

	// Dependencies common to Litematica and Tweakeroo
	sharedMalilib "curse.maven:malilib-303119:${project.malilib_version}"

	// Compat-specific dependencies
	tweakerooCompat "curse.maven:tweakeroo-297344:${project.tweakeroo_version}"
	litematicaCompat "curse.maven:litematica-308892:${project.litematica_version}"
}

ext.compatLayers = [
	'Tweakeroo' : 'TweakerooCompat',
	// 'Litematica' : 'LitematicaCompat',
]

compatLayers.each { name, className ->
	def configName = className[0].toLowerCase() + className[1..-1]
	tasks.create(name: "generate${className}Json", type: DefaultTask) {
		dependsOn processResources
		def outputJsonFile = file("build/main/resources/fabric-${className.toLowerCase()}.mod.json")
		outputs.file outputJsonFile

		doLast {
			def jsonContent = [
				schemaVersion: 1,
				id: "customhud_${className.toLowerCase()}",
				version: "${version}",
				name: "CustomHUD (${name} Compatibility)",
				description: "Loads extra variables for CustomHUD from the ${name} mod",
				authors: [
					"Public Domain"
				],
				contact: [
					homepage: "https://github.com/tsumi666/customhudcompat",
					sources: "https://github.com/tsumi666/customhudcompat"
				],
				license: "CC0-1.0",
				icon: "assets/customhud_compat/icon.png",
				environment: "*",
				entrypoints: [
					main: [
						"we.love.casting.spells.CustomHUD.${className}"
					]
				],
				depends: [
					fabricloader: ">=0.14.22",
					minecraft: "~${project.minecraft_version}",
					java: ">=17",
					"fabric-api": "*",
					"custom_hud": ">=3.3.0"
				],
				suggests: [
					"${className.toLowerCase().substring(0, className.length() - 6)}": "*" // HACK: we might have to get the other modids differently later.
				]
			]
			outputJsonFile.text = new groovy.json.JsonBuilder(jsonContent).toPrettyString()
		}
	}
	tasks.create(name: "${configName}Jar", type: Jar) {
		dependsOn "generate${className}Json"
		archiveBaseName = "CustomHUD+${name}"

		if (configurations.findByName(configName)) {
			from configurations."${configName}"
				compileJava {
					doFirst {
						classpath += configurations."${configName}"
				}
			}
		}

		from ("build/main/resources/") {
			include "fabric-${className.toLowerCase()}.mod.json"
			into "/"
			rename { String fileName -> fileName.replace("fabric-${className.toLowerCase()}.mod.json", "fabric.mod.json") }
		}

		from ("src/main/resources/") {
			include "assets/customhud_compat/icon.png"
		}

		from (sourceSets.main.output) {
			include "we/love/casting/spells/CustomHUD/${className}.class"
			include "we/love/casting/spells/CustomHUD/${className}\$*.class"
		}
	}
	build.dependsOn "${configName}Jar"
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	// withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

jar.enabled = false
remapJar.enabled = false
remapSourcesJar.enabled = false

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}
